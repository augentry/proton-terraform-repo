name: 'proton-run'

on:
  pull_request:
    types:
      - opened
      - reopened
    paths:
      - '**/.proton/deployment-metadata.json'
  push:
    branches:
      - main
    paths:
      - '**/.proton/deployment-metadata.json'
      
jobs:
  get-deployment-data:
    name: Get Deployment Data
    runs-on: ubuntu-latest
    
    # Ignore for now
    outputs:
      role_arn: ${{ steps.get-data.outputs.role_arn }}
      environment: ${{ steps.get-data.outputs.environment }}
      resource_arn: ${{ steps.get-data.outputs.resource_arn }}
      working_directory: ${{ steps.get-data.outputs.working_directory }}
      deployment_id: ${{ steps.get-data.outputs.deployment_id }}
      target_region: ${{ steps.get-data.outputs.target_region }}
      proton_region: ${{ steps.get-data.outputs.proton_region }}
      state_bucket: ${{ steps.get-data.outputs.state_bucket }}    
    
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
      
    # If this job fails, we want to continue on through our workflow
    continue-on-error: true
    
    steps: 
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Get changed files
        id: files
        uses: jitterbit/get-changed-files@v1
      - name: Find modified resource
        id: find-modified
        run: |
          found=false
          # For all files modified in the related event
          for changed_file in ${{ steps.files.outputs.all }}; do
            # Check if the file is a deployment-metadata.json file  
            if [[ "$changed_file" == *".proton/deployment-metadata.json" ]]; then
              echo "found file"
              
              if [[ "$found" == true ]]; then
                echo "More than one resource found to have a new deployment, I'm not sure which one to update, exiting."
                exit 1
              fi
              found=true
           
              # GitHub Actions command for setting outputs
              echo "::set-output name=deployment-metadata-path::$changed_file"
            fi
          done
          if [[ "$found" == false ]]; then
            # The only time this could happen is if the pull request or push 
            # was a deletion of the metadata file.
            echo "No change made to deployment-metadata.json, exiting"
            exit 1
          fi
      - name: Get data
        id: get-data
        run: |
          modified_resource_arn=$(jq -r '.resourceMetadata.arn' ${{ steps.find-modified.outputs.deployment-metadata-path }})
          echo "::set-output name=resource_arn::$modified_resource_arn"
        
          # Split the resource ARN by ':' so we can extract the region
          # Assumes arn:partition:service:region:account-id is how the arn is formatted.
          IFS=':'
          read -a split_arn <<< "$modified_resource_arn"
        
          # The region where this was deployed from could be different from the one configured in
          # env_config.json. This refers to the source region. See target_region below for the other.
          proton_region=${split_arn[3]}
          echo "::set-output name=proton_region::$proton_region"
        
          deployment_id=$(jq -r '.deploymentId' ${{ steps.find-modified.outputs.deployment-metadata-path }})
          echo "::set-output name=deployment_id::$deployment_id"
        
          if [[ "$modified_resource_arn" == *":environment/"* ]]; then
            # ##*/ is some bash magic that allows you to essentially cut off the
            # front of a string up until the last instance of a regex match
            # e.g. arn:aws:proton:us-east-1:111111111111:environment/terraform_env, everything
            # before terraform_env will get removed
            environment_name=${modified_resource_arn##*/}
            working_directory="$environment_name/"
          else
            echo "This script only supports deploying AWS Proton Environments. See https://github.com/aws-samples/aws-proton-terraform-github-actions-sample/blob/main/.github/workflows/proton_run.yml#L69-L125."
            exit 1
          fi 
        
          # Verify that we actually have configuration set up for this environment
          # We might not, if it's a new environment.
          if [[ $(jq -r --arg env $environment_name 'has($env)' env_config.json) = "false" ]]; then
            echo "Missing $env from env_config.json, existing"
            exit 1
          fi
        
          echo "::set-output name=working_directory::$working_directory"
          echo "::set-output name=environment::$environment_name"
        
          # This is the role we are going to use to run terraform
          role_arn=$(jq -r --arg env $environment_name '.[$env]["role"]' env_config.json)
          echo "::set-output name=role_arn::$role_arn"
        
          # The target region where we want our resources to be deployed
          target_region=$(jq -r --arg env $environment_name '.[$env]["region"]' env_config.json)
          echo "::set-output name=target_region::$target_region"
        
          # The S3 bucket we want to use to store our terraform state files.
          state_bucket=$(jq -r --arg env $environment_name '.[$env]["state_bucket"]' env_config.json)
          echo "::set-output name=state_bucket::$state_bucket"    
  terraform:
    name: 'Terraform'
    needs: get-deployment-data
    runs-on: ubuntu-latest   
     
    permissions:
      id-token: write
      contents: read
      
    continue-on-error: true  
    
    # This job should only run if the previous job completed successfully
    if: needs.get-deployment-data.result == 'success'

    defaults:
      run:
        working-directory: ${{ needs.get-deployment-data.outputs.working_directory }}
        shell: bash
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2
    
      # Assume the role configured in the env_config.json
      - name: Configure AWS Credentials
        id: assume_role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ needs.get-deployment-data.outputs.target_region }}
          role-to-assume: ${{ needs.get-deployment-data.outputs.role_arn }}
          role-session-name: TF-Github-Actions

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        id: tf_setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.7
          terraform_wrapper: false
          
            # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: tf_init
        continue-on-error: true
        run: terraform init -backend-config="bucket=${{ needs.get-deployment-data.outputs.state_bucket }}" -backend-config="key=${{ needs.get-deployment-data.outputs.working_directory }}terraform.tfstate" -backend-config="region=${{ needs.get-deployment-data.outputs.target_region }}"
          
      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        id: tf_fmt
        run: terraform fmt -diff -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: tf_plan
        run: terraform plan -var="aws_region=${{ needs.get-deployment-data.outputs.target_region }}"

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        id: tf_apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -var="aws_region=${{ needs.get-deployment-data.outputs.target_region }}"
        
  notify-proton:
    name: 'Notify Proton'
    needs: 
      - get-deployment-data
      - terraform
    runs-on: ubuntu-latest

    # We use this conditional because if it's a pull request and we decide 
    # we don't want to provision the terraform within the commit, we can
    # simply just close the PR without merging it and AWS Proton will 
    # automatically be able to detect that it was canceled.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read
      
    defaults:
      run:
        working-directory: ${{ needs.get-deployment-data.outputs.working_directory }}
        shell: bash # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
        
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Configure AWS Credentials
        id: assume_role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ needs.get-deployment-data.outputs.proton_region }}
          role-to-assume: ${{ needs.get-deployment-data.outputs.role_arn }}
          role-session-name: TF-Github-Actions
        
      - name: Notify Proton Success
        id: notify_success
        if: needs.terraform.result == 'success' && steps.tf_init.outcome == 'success'
        run: |
          # Get outputs as json
          outputs_json=$(terraform output -json)
        
          # The outputs parameters expects a list of key=keyName,valueString=value key=key2Name,valueString=value2 etc...
          # So here we convert the output json into a shell array
          # NOTE: This will probably not play nicely with complex output objects (non primitives)
          formatted_outputs=( $(echo $outputs_json | jq -r "to_entries|map(\"key=\(.key),valueString=\(.value.value|tostring)\")|.[]") )
      
          # Notify proton
          aws proton notify-resource-deployment-status-change --region ${{ needs.get-deployment-data.outputs.proton_region }} --resource-arn ${{ needs.get-deployment-data.outputs.resource_arn }} --status SUCCEEDED --deployment-id ${{ needs.get-deployment-data.outputs.deployment_id }} --outputs $formatted_outputs
          echo "Notify success!"   
        
      - name: Notify Proton Failure
        if: needs.terraform.result == 'failure' || needs.terraform.result == 'cancelled' || steps.tf_init.outcome != 'success'
        run: |
          aws proton notify-resource-deployment-status-change --region ${{ needs.get-deployment-data.outputs.proton_region }} --resource-arn ${{ needs.get-deployment-data.outputs.resource_arn }} --status FAILED --deployment-id ${{ needs.get-deployment-data.outputs.deployment_id }}
          echo "Notify failure!"    
        
